"""ASSURE Control #4: Vulnerability Management Evidence"""

from datetime import date, timedelta
from typing import List, Optional

from pydantic import BaseModel, Field, field_validator

from .base import BaseEvidence


class VulnerabilityScan(BaseModel):
    """Single vulnerability scan result"""

    scan_date: date = Field(description="Date when scan was performed")
    scanner_tool: str = Field(
        min_length=1,
        description="Scanner tool used (e.g., 'Qualys', 'Tenable', 'Wiz')",
    )
    scan_type: str = Field(
        pattern="^(authenticated|unauthenticated)$",
        description="Type of scan performed",
    )
    critical_findings: int = Field(ge=0, description="Number of critical vulnerabilities")
    high_findings: int = Field(ge=0, description="Number of high severity vulnerabilities")
    medium_findings: int = Field(ge=0, description="Number of medium severity vulnerabilities")
    low_findings: int = Field(ge=0, description="Number of low severity vulnerabilities")


class PenetrationTest(BaseModel):
    """Penetration test evidence"""

    test_date: date = Field(description="Date when pentest was performed")
    tester_firm: str = Field(
        min_length=1, description="Third-party firm that conducted the test"
    )
    test_type: str = Field(
        description="Type of pentest (e.g., 'external_black_box', 'internal', 'web_application')"
    )
    critical_findings: int = Field(ge=0, description="Number of critical findings")
    high_findings: int = Field(ge=0, description="Number of high severity findings")
    medium_findings: int = Field(ge=0, description="Number of medium severity findings")
    low_findings: int = Field(ge=0, description="Number of low severity findings")
    all_critical_high_remediated: bool = Field(
        description="Have all critical and high findings been remediated?"
    )


class BugBountyProgram(BaseModel):
    """Bug bounty program details"""

    active: bool = Field(description="Is the bug bounty program currently active?")
    platform: Optional[str] = Field(
        default=None, description="Platform hosting the program (e.g., 'HackerOne', 'Bugcrowd')"
    )
    program_url: Optional[str] = Field(
        default=None, description="Public URL to the bug bounty program"
    )
    last_critical_finding_date: Optional[date] = Field(
        default=None, description="Date of most recent critical finding (if any)"
    )


class VulnerabilityEvidence(BaseEvidence):
    """
    ASSURE Control #4: Vulnerability Management Evidence.

    This evidence type validates that vendors have robust vulnerability
    management practices including regular scanning, penetration testing,
    and SLA-driven remediation.

    ASSURE Requirements:
    - Vulnerability scans must be run at least monthly (last 3 months required)
    - Penetration test must be within last 12 months
    - Vulnerability SLAs must be met (typically: Critical 7d, High 30d, Medium 90d)
    - All critical/high pentest findings must be remediated

    Example:
        evidence = VulnerabilityEvidence(
            vendor_name="Acme Corp",
            evidence_date="2025-10-16",
            scans_last_3_months=[
                VulnerabilityScan(
                    scan_date="2025-10-15",
                    scanner_tool="Qualys",
                    scan_type="authenticated",
                    critical=0,
                    high=2,
                    medium=5,
                    low=12
                ),
                # ... 2 more scans
            ],
            penetration_test=PenetrationTest(
                test_date="2025-09-01",
                tester_firm="Acme Security",
                test_type="external_black_box",
                critical_findings=0,
                high_findings=2,
                all_critical_high_remediated=True
            ),
            vulnerability_sla_met=True,
            extraction_confidence=0.92
        )
    """

    evidence_type: str = Field(default="assure_004_vulnerability_mgmt")

    # Vulnerability scans (last 3 months recommended but optional - might come from separate document)
    scans_last_3_months: List[VulnerabilityScan] = Field(
        default_factory=list,
        description="ASSURE requires monthly scans for at least 3 months (may come from separate scan report)",
    )

    # Penetration test (annual - optional as might come from separate document)
    penetration_test: Optional[PenetrationTest] = Field(
        default=None,
        description="Most recent penetration test (must be within 12 months - may come from separate pentest report)"
    )

    # Bug bounty (optional but recommended)
    bug_bounty: Optional[BugBountyProgram] = Field(
        default=None,
        description="Bug bounty program details (optional but demonstrates security maturity)",
    )

    # SLA compliance
    vulnerability_sla_met: bool = Field(
        description="Are vulnerability remediation SLAs being met?"
    )
    sla_details: Optional[str] = Field(
        default=None,
        description="SLA policy (e.g., 'Critical: 7d, High: 30d, Medium: 90d')",
    )

    # SOC 2 overlap (override defaults from BaseEvidence)
    soc2_section_4_criteria: List[str] = Field(
        default=["CC7.1", "CC7.2"],
        description="SOC 2 system monitoring and control activities",
    )
    soc2_coverage_percentage: int = Field(
        default=80,
        ge=0,
        le=100,
        description="Vulnerability management is typically 80% covered in SOC 2",
    )

    @field_validator("scans_last_3_months")
    @classmethod
    def validate_scan_frequency(cls, v: List[VulnerabilityScan]) -> List[VulnerabilityScan]:
        """
        Validate that scans are monthly and cover last 3 months (if present).

        ASSURE requires vendors to conduct vulnerability scans at least monthly.
        However, scan data might come from a separate document than pentest data.

        Args:
            v: List of vulnerability scans

        Returns:
            List[VulnerabilityScan]: Validated scan list

        Raises:
            ValueError: If scans are present but don't meet requirements
        """
        # If no scans provided, that's OK (might come from separate document)
        if len(v) == 0:
            return v

        # If scans are provided, validate them
        if len(v) < 3:
            raise ValueError(
                f"ASSURE requires at least 3 monthly vulnerability scans. "
                f"Only {len(v)} scan(s) provided."
            )

        # Check scans are within last 3 months (90 days)
        three_months_ago = date.today() - timedelta(days=90)
        for scan in v:
            if scan.scan_date < three_months_ago:
                raise ValueError(
                    f"Scan from {scan.scan_date} is older than 3 months "
                    f"(before {three_months_ago}). "
                    f"ASSURE requires current scans from the last 90 days."
                )

        return v

    @field_validator("penetration_test")
    @classmethod
    def validate_pentest_recency(cls, v: Optional[PenetrationTest]) -> Optional[PenetrationTest]:
        """
        Validate that penetration test is within last 12 months (if present).

        ASSURE requires vendors to conduct annual penetration tests.
        However, pentest data might come from a separate document than scan data.

        Args:
            v: Penetration test evidence (optional)

        Returns:
            Optional[PenetrationTest]: Validated pentest or None

        Raises:
            ValueError: If pentest is present but older than 12 months
        """
        # If no pentest provided, that's OK (might come from separate document)
        if v is None:
            return None

        # If pentest is provided, validate it
        twelve_months_ago = date.today() - timedelta(days=365)
        if v.test_date < twelve_months_ago:
            raise ValueError(
                f"Penetration test from {v.test_date} is older than 12 months "
                f"(before {twelve_months_ago}). "
                f"ASSURE requires annual pentests."
            )
        return v

    def is_compliant(self) -> bool:
        """
        Check if this evidence meets ASSURE compliance requirements.

        Compliance criteria:
        1. At least 3 monthly vulnerability scans in last 90 days
        2. Penetration test within last 12 months
        3. Vulnerability SLAs are being met
        4. All critical and high pentest findings remediated

        Returns:
            bool: True if evidence meets ASSURE requirements, False otherwise
        """
        try:
            # Scan frequency (handled by validator)
            self.validate_scan_frequency(self.scans_last_3_months)

            # Pentest recency (handled by validator)
            self.validate_pentest_recency(self.penetration_test)

            # SLA compliance required
            if not self.vulnerability_sla_met:
                return False

            # No unresolved critical/high findings in pentest
            if not self.penetration_test.all_critical_high_remediated:
                return False

            return True

        except ValueError:
            # Validation failed (old scans or pentest)
            return False

    def get_non_compliance_reasons(self) -> List[str]:
        """
        Get specific reasons why this evidence is non-compliant.

        Useful for reporting and remediation guidance.

        Returns:
            List[str]: List of non-compliance reasons (empty if compliant)
        """
        reasons = []

        # Check scan frequency
        if len(self.scans_last_3_months) < 3:
            reasons.append(
                f"Only {len(self.scans_last_3_months)} vulnerability scan(s) provided. "
                f"ASSURE requires at least 3 monthly scans."
            )

        three_months_ago = date.today() - timedelta(days=90)
        for scan in self.scans_last_3_months:
            if scan.scan_date < three_months_ago:
                reasons.append(
                    f"Vulnerability scan from {scan.scan_date} is older than 3 months"
                )

        # Check pentest recency
        twelve_months_ago = date.today() - timedelta(days=365)
        if self.penetration_test.test_date < twelve_months_ago:
            reasons.append(
                f"Penetration test from {self.penetration_test.test_date} is older than 12 months"
            )

        # Check SLA compliance
        if not self.vulnerability_sla_met:
            reasons.append(
                "Vulnerability SLAs are not being met. "
                "ASSURE requires timely remediation (typically: Critical 7d, High 30d, Medium 90d)"
            )

        # Check pentest critical/high remediation
        if not self.penetration_test.all_critical_high_remediated:
            reasons.append(
                "Not all critical and high severity pentest findings have been remediated"
            )

        return reasons

    def get_total_vulnerabilities_latest_scan(self) -> int:
        """
        Get total vulnerability count from most recent scan.

        Returns:
            int: Total vulnerabilities across all severity levels
        """
        if not self.scans_last_3_months:
            return 0

        # Get most recent scan (scans should be sorted by date)
        latest_scan = max(self.scans_last_3_months, key=lambda s: s.scan_date)

        return (
            latest_scan.critical_findings
            + latest_scan.high_findings
            + latest_scan.medium_findings
            + latest_scan.low_findings
        )

    def has_active_bug_bounty(self) -> bool:
        """
        Check if vendor has an active bug bounty program.

        Returns:
            bool: True if bug bounty program is active, False otherwise
        """
        return self.bug_bounty is not None and self.bug_bounty.active

    def get_total_requirements(self) -> int:
        """
        Vulnerability Management has 4 core requirements that ASSURE checks.

        Requirements:
        1. At least 3 monthly scans in last 90 days
        2. Penetration test within last 12 months
        3. Vulnerability SLAs being met
        4. All critical/high pentest findings remediated

        Note: Bug bounty is optional and NOT counted in compliance percentage

        Returns:
            int: Total of 4 requirements
        """
        return 4

    def get_passed_requirements(self) -> int:
        """
        Count how many of the 4 vulnerability management requirements pass validation.

        Returns:
            int: Number of passed requirements (0-4)
        """
        passed = 0

        # Requirement 1: At least 3 monthly scans in last 90 days
        if len(self.scans_last_3_months) >= 3:
            three_months_ago = date.today() - timedelta(days=90)
            all_scans_recent = all(
                scan.scan_date >= three_months_ago for scan in self.scans_last_3_months
            )
            if all_scans_recent:
                passed += 1

        # Requirement 2: Penetration test within last 12 months
        twelve_months_ago = date.today() - timedelta(days=365)
        if self.penetration_test.test_date >= twelve_months_ago:
            passed += 1

        # Requirement 3: Vulnerability SLAs being met
        if self.vulnerability_sla_met:
            passed += 1

        # Requirement 4: All critical/high pentest findings remediated
        if self.penetration_test.all_critical_high_remediated:
            passed += 1

        return passed
