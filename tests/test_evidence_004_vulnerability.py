"""Tests for ASSURE Control #4: Vulnerability Management Evidence"""

from datetime import date, timedelta

import pytest
from pydantic import ValidationError

from conduit.models.evidence_004_vulnerability import (
    BugBountyProgram,
    PenetrationTest,
    VulnerabilityEvidence,
    VulnerabilityScan,
)


class TestVulnerabilityEvidence:
    """Test suite for Vulnerability Management evidence model"""

    def test_valid_evidence_passes(self):
        """Test that valid vulnerability evidence passes validation"""
        evidence = VulnerabilityEvidence(
            vendor_name="Acme Corp",
            evidence_date=date.today(),
            scans_last_3_months=[
                VulnerabilityScan(
                    scan_date=date.today() - timedelta(days=15),
                    scanner_tool="Qualys",
                    scan_type="authenticated",
                    critical_findings=0,
                    high_findings=2,
                    medium_findings=5,
                    low_findings=12,
                ),
                VulnerabilityScan(
                    scan_date=date.today() - timedelta(days=45),
                    scanner_tool="Qualys",
                    scan_type="authenticated",
                    critical_findings=0,
                    high_findings=3,
                    medium_findings=8,
                    low_findings=15,
                ),
                VulnerabilityScan(
                    scan_date=date.today() - timedelta(days=75),
                    scanner_tool="Qualys",
                    scan_type="authenticated",
                    critical_findings=1,
                    high_findings=4,
                    medium_findings=10,
                    low_findings=18,
                ),
            ],
            penetration_test=PenetrationTest(
                test_date=date.today() - timedelta(days=60),
                tester_firm="Security Firm Inc",
                test_type="external_black_box",
                critical_findings=0,
                high_findings=2,
                medium_findings=5,
                low_findings=8,
                all_critical_high_remediated=True,
            ),
            vulnerability_sla_met=True,
            sla_details="Critical: 7d, High: 30d, Medium: 90d",
            extraction_confidence=0.92,
        )

        assert evidence.is_compliant() is True
        assert len(evidence.scans_last_3_months) == 3

    def test_insufficient_scans_rejected(self):
        """Test that fewer than 3 scans raises ValidationError"""
        with pytest.raises(ValidationError) as exc_info:
            VulnerabilityEvidence(
                vendor_name="Acme Corp",
                evidence_date=date.today(),
                scans_last_3_months=[
                    VulnerabilityScan(
                        scan_date=date.today() - timedelta(days=15),
                        scanner_tool="Qualys",
                        scan_type="authenticated",
                        critical_findings=0,
                        high_findings=2,
                        medium_findings=5,
                        low_findings=12,
                    ),
                    # Only 2 scans - not enough!
                ],
                penetration_test=PenetrationTest(
                    test_date=date.today() - timedelta(days=60),
                    tester_firm="Security Firm Inc",
                    test_type="external_black_box",
                    critical_findings=0,
                    high_findings=0,
                    medium_findings=0,
                    low_findings=0,
                    all_critical_high_remediated=True,
                ),
                vulnerability_sla_met=True,
                extraction_confidence=0.85,
            )

        error_message = str(exc_info.value)
        assert "at least 3" in error_message.lower()

    def test_old_scan_rejected(self):
        """Test that scans older than 3 months raise ValidationError"""
        with pytest.raises(ValidationError) as exc_info:
            VulnerabilityEvidence(
                vendor_name="Acme Corp",
                evidence_date=date.today(),
                scans_last_3_months=[
                    VulnerabilityScan(
                        scan_date=date.today() - timedelta(days=15),
                        scanner_tool="Qualys",
                        scan_type="authenticated",
                        critical_findings=0,
                        high_findings=0,
                        medium_findings=0,
                        low_findings=0,
                    ),
                    VulnerabilityScan(
                        scan_date=date.today() - timedelta(days=45),
                        scanner_tool="Qualys",
                        scan_type="authenticated",
                        critical_findings=0,
                        high_findings=0,
                        medium_findings=0,
                        low_findings=0,
                    ),
                    VulnerabilityScan(
                        scan_date=date.today() - timedelta(days=120),  # Too old!
                        scanner_tool="Qualys",
                        scan_type="authenticated",
                        critical_findings=0,
                        high_findings=0,
                        medium_findings=0,
                        low_findings=0,
                    ),
                ],
                penetration_test=PenetrationTest(
                    test_date=date.today() - timedelta(days=60),
                    tester_firm="Security Firm Inc",
                    test_type="external_black_box",
                    critical_findings=0,
                    high_findings=0,
                    medium_findings=0,
                    low_findings=0,
                    all_critical_high_remediated=True,
                ),
                vulnerability_sla_met=True,
                extraction_confidence=0.85,
            )

        error_message = str(exc_info.value)
        assert "older than 3 months" in error_message.lower()

    def test_old_pentest_rejected(self):
        """Test that pentest older than 12 months raises ValidationError"""
        with pytest.raises(ValidationError) as exc_info:
            VulnerabilityEvidence(
                vendor_name="Acme Corp",
                evidence_date=date.today(),
                scans_last_3_months=[
                    VulnerabilityScan(
                        scan_date=date.today() - timedelta(days=15),
                        scanner_tool="Qualys",
                        scan_type="authenticated",
                        critical_findings=0,
                        high_findings=0,
                        medium_findings=0,
                        low_findings=0,
                    ),
                    VulnerabilityScan(
                        scan_date=date.today() - timedelta(days=45),
                        scanner_tool="Qualys",
                        scan_type="authenticated",
                        critical_findings=0,
                        high_findings=0,
                        medium_findings=0,
                        low_findings=0,
                    ),
                    VulnerabilityScan(
                        scan_date=date.today() - timedelta(days=75),
                        scanner_tool="Qualys",
                        scan_type="authenticated",
                        critical_findings=0,
                        high_findings=0,
                        medium_findings=0,
                        low_findings=0,
                    ),
                ],
                penetration_test=PenetrationTest(
                    test_date=date.today() - timedelta(days=400),  # Too old!
                    tester_firm="Security Firm Inc",
                    test_type="external_black_box",
                    critical_findings=0,
                    high_findings=0,
                    medium_findings=0,
                    low_findings=0,
                    all_critical_high_remediated=True,
                ),
                vulnerability_sla_met=True,
                extraction_confidence=0.85,
            )

        error_message = str(exc_info.value)
        assert "older than 12 months" in error_message.lower()

    def test_unmet_sla_is_non_compliant(self):
        """Test that unmet SLAs make evidence non-compliant"""
        evidence = VulnerabilityEvidence(
            vendor_name="Acme Corp",
            evidence_date=date.today(),
            scans_last_3_months=[
                VulnerabilityScan(
                    scan_date=date.today() - timedelta(days=15),
                    scanner_tool="Qualys",
                    scan_type="authenticated",
                    critical_findings=5,  # Has critical vulns
                    high_findings=10,
                    medium_findings=20,
                    low_findings=30,
                ),
                VulnerabilityScan(
                    scan_date=date.today() - timedelta(days=45),
                    scanner_tool="Qualys",
                    scan_type="authenticated",
                    critical_findings=0,
                    high_findings=0,
                    medium_findings=0,
                    low_findings=0,
                ),
                VulnerabilityScan(
                    scan_date=date.today() - timedelta(days=75),
                    scanner_tool="Qualys",
                    scan_type="authenticated",
                    critical_findings=0,
                    high_findings=0,
                    medium_findings=0,
                    low_findings=0,
                ),
            ],
            penetration_test=PenetrationTest(
                test_date=date.today() - timedelta(days=60),
                tester_firm="Security Firm Inc",
                test_type="external_black_box",
                critical_findings=0,
                high_findings=0,
                medium_findings=0,
                low_findings=0,
                all_critical_high_remediated=True,
            ),
            vulnerability_sla_met=False,  # SLAs not met!
            extraction_confidence=0.85,
        )

        assert evidence.is_compliant() is False

    def test_unremediated_pentest_findings_is_non_compliant(self):
        """Test that unremediated critical/high pentest findings make evidence non-compliant"""
        evidence = VulnerabilityEvidence(
            vendor_name="Acme Corp",
            evidence_date=date.today(),
            scans_last_3_months=[
                VulnerabilityScan(
                    scan_date=date.today() - timedelta(days=15),
                    scanner_tool="Qualys",
                    scan_type="authenticated",
                    critical_findings=0,
                    high_findings=0,
                    medium_findings=0,
                    low_findings=0,
                ),
                VulnerabilityScan(
                    scan_date=date.today() - timedelta(days=45),
                    scanner_tool="Qualys",
                    scan_type="authenticated",
                    critical_findings=0,
                    high_findings=0,
                    medium_findings=0,
                    low_findings=0,
                ),
                VulnerabilityScan(
                    scan_date=date.today() - timedelta(days=75),
                    scanner_tool="Qualys",
                    scan_type="authenticated",
                    critical_findings=0,
                    high_findings=0,
                    medium_findings=0,
                    low_findings=0,
                ),
            ],
            penetration_test=PenetrationTest(
                test_date=date.today() - timedelta(days=60),
                tester_firm="Security Firm Inc",
                test_type="external_black_box",
                critical_findings=2,  # Unresolved!
                high_findings=5,
                medium_findings=10,
                low_findings=15,
                all_critical_high_remediated=False,  # Not remediated!
            ),
            vulnerability_sla_met=True,
            extraction_confidence=0.90,
        )

        assert evidence.is_compliant() is False

    def test_bug_bounty_optional(self):
        """Test that bug bounty is optional"""
        evidence = VulnerabilityEvidence(
            vendor_name="Acme Corp",
            evidence_date=date.today(),
            scans_last_3_months=[
                VulnerabilityScan(
                    scan_date=date.today() - timedelta(days=15),
                    scanner_tool="Qualys",
                    scan_type="authenticated",
                    critical_findings=0,
                    high_findings=0,
                    medium_findings=0,
                    low_findings=0,
                ),
                VulnerabilityScan(
                    scan_date=date.today() - timedelta(days=45),
                    scanner_tool="Qualys",
                    scan_type="authenticated",
                    critical_findings=0,
                    high_findings=0,
                    medium_findings=0,
                    low_findings=0,
                ),
                VulnerabilityScan(
                    scan_date=date.today() - timedelta(days=75),
                    scanner_tool="Qualys",
                    scan_type="authenticated",
                    critical_findings=0,
                    high_findings=0,
                    medium_findings=0,
                    low_findings=0,
                ),
            ],
            penetration_test=PenetrationTest(
                test_date=date.today() - timedelta(days=60),
                tester_firm="Security Firm Inc",
                test_type="external_black_box",
                critical_findings=0,
                high_findings=0,
                medium_findings=0,
                low_findings=0,
                all_critical_high_remediated=True,
            ),
            bug_bounty=None,  # No bug bounty
            vulnerability_sla_met=True,
            extraction_confidence=0.90,
        )

        assert evidence.is_compliant() is True
        assert evidence.has_active_bug_bounty() is False

    def test_bug_bounty_with_details(self):
        """Test that bug bounty details are captured correctly"""
        evidence = VulnerabilityEvidence(
            vendor_name="Acme Corp",
            evidence_date=date.today(),
            scans_last_3_months=[
                VulnerabilityScan(
                    scan_date=date.today() - timedelta(days=15),
                    scanner_tool="Qualys",
                    scan_type="authenticated",
                    critical_findings=0,
                    high_findings=0,
                    medium_findings=0,
                    low_findings=0,
                ),
                VulnerabilityScan(
                    scan_date=date.today() - timedelta(days=45),
                    scanner_tool="Qualys",
                    scan_type="authenticated",
                    critical_findings=0,
                    high_findings=0,
                    medium_findings=0,
                    low_findings=0,
                ),
                VulnerabilityScan(
                    scan_date=date.today() - timedelta(days=75),
                    scanner_tool="Qualys",
                    scan_type="authenticated",
                    critical_findings=0,
                    high_findings=0,
                    medium_findings=0,
                    low_findings=0,
                ),
            ],
            penetration_test=PenetrationTest(
                test_date=date.today() - timedelta(days=60),
                tester_firm="Security Firm Inc",
                test_type="external_black_box",
                critical_findings=0,
                high_findings=0,
                medium_findings=0,
                low_findings=0,
                all_critical_high_remediated=True,
            ),
            bug_bounty=BugBountyProgram(
                active=True,
                platform="HackerOne",
                program_url="https://hackerone.com/acme",
                last_critical_finding_date=date.today() - timedelta(days=120),
            ),
            vulnerability_sla_met=True,
            extraction_confidence=0.95,
        )

        assert evidence.is_compliant() is True
        assert evidence.has_active_bug_bounty() is True
        assert evidence.bug_bounty.platform == "HackerOne"

    def test_get_total_vulnerabilities_latest_scan(self):
        """Test total vulnerability count from latest scan"""
        evidence = VulnerabilityEvidence(
            vendor_name="Acme Corp",
            evidence_date=date.today(),
            scans_last_3_months=[
                VulnerabilityScan(
                    scan_date=date.today() - timedelta(days=15),  # Latest
                    scanner_tool="Qualys",
                    scan_type="authenticated",
                    critical_findings=1,
                    high_findings=2,
                    medium_findings=5,
                    low_findings=10,
                ),
                VulnerabilityScan(
                    scan_date=date.today() - timedelta(days=45),
                    scanner_tool="Qualys",
                    scan_type="authenticated",
                    critical_findings=0,
                    high_findings=0,
                    medium_findings=0,
                    low_findings=0,
                ),
                VulnerabilityScan(
                    scan_date=date.today() - timedelta(days=75),
                    scanner_tool="Qualys",
                    scan_type="authenticated",
                    critical_findings=0,
                    high_findings=0,
                    medium_findings=0,
                    low_findings=0,
                ),
            ],
            penetration_test=PenetrationTest(
                test_date=date.today() - timedelta(days=60),
                tester_firm="Security Firm Inc",
                test_type="external_black_box",
                critical_findings=0,
                high_findings=0,
                medium_findings=0,
                low_findings=0,
                all_critical_high_remediated=True,
            ),
            vulnerability_sla_met=True,
            extraction_confidence=0.90,
        )

        total = evidence.get_total_vulnerabilities_latest_scan()
        assert total == 18  # 1 + 2 + 5 + 10

    def test_get_non_compliance_reasons(self):
        """Test detailed non-compliance reasons"""
        evidence = VulnerabilityEvidence(
            vendor_name="Acme Corp",
            evidence_date=date.today(),
            scans_last_3_months=[
                VulnerabilityScan(
                    scan_date=date.today() - timedelta(days=15),
                    scanner_tool="Qualys",
                    scan_type="authenticated",
                    critical_findings=0,
                    high_findings=0,
                    medium_findings=0,
                    low_findings=0,
                ),
                VulnerabilityScan(
                    scan_date=date.today() - timedelta(days=45),
                    scanner_tool="Qualys",
                    scan_type="authenticated",
                    critical_findings=0,
                    high_findings=0,
                    medium_findings=0,
                    low_findings=0,
                ),
                VulnerabilityScan(
                    scan_date=date.today() - timedelta(days=75),
                    scanner_tool="Qualys",
                    scan_type="authenticated",
                    critical_findings=0,
                    high_findings=0,
                    medium_findings=0,
                    low_findings=0,
                ),
            ],
            penetration_test=PenetrationTest(
                test_date=date.today() - timedelta(days=60),
                tester_firm="Security Firm Inc",
                test_type="external_black_box",
                critical_findings=2,
                high_findings=5,
                medium_findings=10,
                low_findings=15,
                all_critical_high_remediated=False,  # Not remediated
            ),
            vulnerability_sla_met=False,  # SLA not met
            extraction_confidence=0.85,
        )

        reasons = evidence.get_non_compliance_reasons()
        assert len(reasons) > 0
        assert any("sla" in reason.lower() for reason in reasons)
        assert any("remediated" in reason.lower() for reason in reasons)

    def test_evidence_type_default(self):
        """Test that evidence_type has correct default value"""
        evidence = VulnerabilityEvidence(
            vendor_name="Acme Corp",
            evidence_date=date.today(),
            scans_last_3_months=[
                VulnerabilityScan(
                    scan_date=date.today() - timedelta(days=15),
                    scanner_tool="Qualys",
                    scan_type="authenticated",
                    critical_findings=0,
                    high_findings=0,
                    medium_findings=0,
                    low_findings=0,
                ),
                VulnerabilityScan(
                    scan_date=date.today() - timedelta(days=45),
                    scanner_tool="Qualys",
                    scan_type="authenticated",
                    critical_findings=0,
                    high_findings=0,
                    medium_findings=0,
                    low_findings=0,
                ),
                VulnerabilityScan(
                    scan_date=date.today() - timedelta(days=75),
                    scanner_tool="Qualys",
                    scan_type="authenticated",
                    critical_findings=0,
                    high_findings=0,
                    medium_findings=0,
                    low_findings=0,
                ),
            ],
            penetration_test=PenetrationTest(
                test_date=date.today() - timedelta(days=60),
                tester_firm="Security Firm Inc",
                test_type="external_black_box",
                critical_findings=0,
                high_findings=0,
                medium_findings=0,
                low_findings=0,
                all_critical_high_remediated=True,
            ),
            vulnerability_sla_met=True,
            extraction_confidence=0.90,
        )

        assert evidence.evidence_type == "assure_004_vulnerability_mgmt"
